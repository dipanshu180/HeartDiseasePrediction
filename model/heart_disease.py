# -*- coding: utf-8 -*-
"""heart_disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCNsQ8NGCDHJkAj3qapvluT98SCzH3Zz

$Heart Disease Prediction$
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn.model_selection
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns

df = pd.read_csv("heart.csv")
df.head()

"""EDA

"""

df.info()

df.shape

df.describe()

df.isna().sum()

df.nunique()

"""### AS per data preprocessiong the data is structure format"""



sns.pairplot(df[['age','cp','thalach','target']])

df.corr()

plt.figure(figsize=(15,12))
sns.heatmap(df.corr(),annot=True,cmap='coolwarm',vmin=-1,vmax=1)

X = df[['age','cp','thalach']]
y=df['target']
X,y

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)
model = LogisticRegression()
model.fit(X_train,y_train)

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:1]
y_proba

print(f"Accuracy score(train):{accuracy_score(y_train,y_train_pred):.2f}")
print(f"Accuracy score(test):{accuracy_score(y_test,y_test_pred):.2f}")

# from sklearn.metrics import confusion_matrix, classification_report

print(f"Confusion matrix:\n{confusion_matrix(y_train, y_train_pred)}")
print(f"Confusion matrix:\n{confusion_matrix(y_test, y_test_pred)}")

print(f"Classification report:\n{classification_report(y_test,y_test_pred)}")

model.score(X_train,y_train)

"""###INPUT

"""

#user input finction for prediction

def predict_heart_disease():
  age = int(input("Enter age:"))
  cp = int(input("cp:"))
  thalach = int(input("Maximum heart rate: "))

  user_data = pd.DataFrame([[age,cp,thalach]], columns = ['age','cp','thalach'])

  prediction = model.predict(user_data)
  result = "Heart Disease Present" if prediction[0] == 1 else "No heart Disease"
  print(f"Prediction:{result}")

 # Call the user input function to test
predict_heart_disease()

"""Result -  
The final output of this perticular model can only predict up to the 80% efficiently. The finalise model is 80 which means is golobally accepted.

###**Model** **Deployment**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn.model_selection
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns

df = pd.read_csv("heart.csv")
df.head()

X = df[['age','cp','thalach']]
y=df['target']
X,y
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)
model = LogisticRegression()
model.fit(X_train,y_train)
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:1]
y_proba

#user input finction for prediction

def predict_heart_disease():
  age = int(input("Enter age:"))
  cp = int(input("cp:"))
  thalach = int(input("Maximum heart rate: "))

  user_data = pd.DataFrame([[age,cp,thalach]], columns = ['age','cp','thalach'])

  prediction = model.predict(user_data)
  result = "Heart Disease Present" if prediction[0] == 1 else "No heart Disease"
  print(f"Prediction:{result}")

 # Call the user input function to test
predict_heart_disease()

"""###Model saving"""

import joblib
joblib.dump(model,'heart_disease_model.joblib')